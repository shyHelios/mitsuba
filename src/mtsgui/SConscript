Import('env', 'os', 'glob', 'sys', 'hasQt', 'hasCollada', 'hasBreakpad', 'mainEnv',
        'resources', 'converter_objects')

# For running Uic & Moc (below)
def recursiveDirs(root) :
        return list(filter((lambda a : a.rfind(".svn") == -1), [a[0] for a in os.walk(root)]))

def unique(l) :
        return list(dict.fromkeys(l).keys())

def scanFiles(dir, accept=["*.cpp"], reject=[]) :
        sources = []
        paths = recursiveDirs(dir)
        for path in paths:
                for pattern in accept :
                        sources+=glob.glob(path + "/" + pattern)
        for pattern in reject:
                sources = list(filter((lambda a : a.rfind(pattern) == -1), sources))
        sources = list(map((lambda a : os.path.basename(a)), sources))
        return unique(sources)


if hasQt:
        qtEnv = mainEnv.Clone()
        qtEnv.Append(CPPPATH=['#src/mtsgui'])
        if 'QTINCLUDE' in qtEnv:
                qtEnv.Prepend(CPPPATH=qtEnv['QTINCLUDE'])
        qtEnv.EnableQt5Modules(['QtGui', 'QtWidgets', 'QtCore', 'QtOpenGL', 'QtXml', 'QtXmlPatterns', 'QtNetwork'])

        if sys.platform == 'win32':
                index = qtEnv['CXXFLAGS'].index('_CONSOLE')
                del qtEnv['CXXFLAGS'][index-1]
                del qtEnv['CXXFLAGS'][index-1]
                index = qtEnv['LINKFLAGS'].index('/SUBSYSTEM:CONSOLE')
                del qtEnv['LINKFLAGS'][index]
                qtEnv.Append(CXXFLAGS=['/D', '_WINDOWS', '/D', 'MTS_CUSTOM_QTMAIN', '/D', 'MTSGUI_STATIC_QFILEDIALOG=1'])
                qtEnv.Append(LINKFLAGS=['/SUBSYSTEM:WINDOWS'])
                qtEnv.Append(LIBS=['qtmain', 'shell32'])

        bpath = env.GetBuildPath('#src/mtsgui')
        qtInterfaces = [qtEnv.Uic5(uic) for uic in scanFiles(bpath, ['*.ui'])]
        qtResources = [qtEnv.Qrc(qrc) for qrc in scanFiles(bpath, ['*.qrc'])]
        qtSources = scanFiles(bpath, ['*.cpp']) + qtResources + resources

        if hasCollada:
                qtSources += converter_objects
                if 'COLLADALIBDIR' in env:
                        qtEnv.Prepend(LIBPATH=env['COLLADALIBDIR'])
                if 'COLLADALIB' in env:
                        qtEnv.Prepend(LIBS=env['COLLADALIB'])

        qtSources = [x for x in qtSources if (not isinstance(x, str) or 'cocoa' not in x)]

        mtsgui = qtEnv.Program('mtsgui', qtSources)
