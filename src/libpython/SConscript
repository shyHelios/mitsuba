Import('env', 'sys', 'os', 'hasPython')

for ver in hasPython:
        sver = ver.replace('.', '')
        python_include = list(env['PYTHON'+sver+'INCLUDE']) if ('PYTHON'+sver+'INCLUDE') in env else []
        python_libdir = list(env['PYTHON'+sver+'LIBDIR']) if ('PYTHON'+sver+'LIBDIR') in env else []
        python_lib = list(env['PYTHON'+sver+'LIB']) if ('PYTHON'+sver+'LIB') in env else []

        pythonEnv = env.Clone()
        pythonEnv.Prepend(CPPPATH=python_include)
        pythonEnv.Prepend(LIBPATH=python_libdir)
        pythonEnv.Prepend(LIBS=python_lib)


        pythonEnv.Append(CPPDEFINES = [['MTS_BUILD_MODULE', 'MTS_MODULE_PYTHON']])
        pythonEnv['SHLIBPREFIX']=''
        pythonEnv.RelaxCompilerSettings()
        pythonEnv.Append(LIBS=['mitsuba-bidir'])
        pythonEnv.Append(LIBPATH=['#src/libbidir'])

        if 'XERCESINCLUDE' in pythonEnv:
                pythonEnv.Prepend(CPPPATH=pythonEnv['XERCESINCLUDE'])
        if 'XERCESLIBDIR' in pythonEnv:
                pythonEnv.Prepend(LIBPATH=pythonEnv['XERCESLIBDIR'])
        if 'XERCESLIB' in pythonEnv:
                pythonEnv.Prepend(LIBS=pythonEnv['XERCESLIB'])

        # Create an OBJ file with many addressable sections (or compilation may fail on Windows)
        pythonEnv.Append(CPPFLAGS = ['/bigobj'])

        libcore_obj = pythonEnv.SharedObject('core_'+ver, 'core.cpp')
        librender_obj = pythonEnv.SharedObject('render_'+ver, 'render.cpp')
        libpython = pythonEnv.SharedLibrary('mitsuba_python'+ver, [libcore_obj, librender_obj])