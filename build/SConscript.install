from __future__ import print_function
import fnmatch

Import('env', 'os', 'sys', 'plugins', 'dist',
        'MTS_VERSION', 'hasQt', 'hasCollada', 'hasPython', 'hasBreakpad')

installTargets = []

def install(target, paths, prefix = None):
        global installTargets
        if prefix == None:
                prefix = env['BUILDDIR']
        for path in paths:
                if os.path.splitext(path)[1] == '.dylib':
                        installTargets += env.OSXLibInst(target, prefix + '/' + path)
                else:
                        installTargets += env.Install(target, prefix + '/' + path)

def installAs(target, path, prefix = None):
        global installTargets
        if prefix == None:
                prefix = env['BUILDDIR']
        if os.path.splitext(path)[1] == '.dylib':
                result = env.OSXLibInstAs(target, prefix + '/' + path)
        else:
                result = env.InstallAs(target, prefix + '/' + path)
        installTargets += result
        return result

if not 'DISTDIR' in env:
        print('The \"DISTDIR\" variable is missing. Please update your configuration file!')
        Exit(1)

distDir = env.GetBuildPath(env['DISTDIR'])
basePath = env.GetBuildPath('#')

for file in os.listdir(env.GetBuildPath('#data/schema')):
        if fnmatch.fnmatch(file, '*.xsl') or fnmatch.fnmatch(file, '*.xsd'):
                installTargets += env.Install(os.path.join(distDir, 'data/schema'), '#data/schema/' + file)
for file in os.listdir(env.GetBuildPath('#data/ior')):
        if fnmatch.fnmatch(file, '*.spd'):
                installTargets += env.Install(os.path.join(distDir, 'data/ior'), '#data/ior/' + file)
for file in os.listdir(env.GetBuildPath('#data/microfacet')):
        if fnmatch.fnmatch(file, '*.dat'):
                installTargets += env.Install(os.path.join(distDir, 'data/microfacet'), '#data/microfacet/' + file)

if sys.platform == 'win32':
        for plugin in plugins:
                if '.dll' in plugin.__str__():
                        installTargets += env.Install(os.path.join(distDir, 'plugins'), plugin)

        compilerType = 'vc141'
        archType = 'x64' if 'WIN64' in env['CXXFLAGS'] else 'i386'
        dllprefix = '#dependencies/lib'

        if hasCollada:
                install(distDir, ['converter/mtsimport.exe'])
        sdkDir = os.path.join(distDir, "sdk")
        sdkLibDir = os.path.join(sdkDir, "lib")

        install(distDir, ['mitsuba/mitsuba.exe', 'mitsuba/mtssrv.exe', 'mitsuba/mtsutil.exe'])
        install(distDir, ['libcore/libmitsuba-core.dll', 'libhw/libmitsuba-hw.dll',
                        'librender/libmitsuba-render.dll', 'libbidir/libmitsuba-bidir.dll'])
        install(sdkLibDir, ['libcore/mitsuba-core.lib', 'libhw/mitsuba-hw.lib',
                        'librender/mitsuba-render.lib', 'libbidir/mitsuba-bidir.lib'])
        for entry in os.walk(os.path.join(basePath, "include")):
                includeDir = entry[0][len(basePath)+1:]
                installTargets += env.Install(os.path.join(sdkDir, includeDir),
                        [ ('#' + os.path.join(includeDir, fname)) for fname in entry[2] ])
        for ver in hasPython:
                installAs(os.path.join(distDir, 'python/'+ver+'/mitsuba.pyd'), 'libpython/mitsuba_python' + ver + '.dll')
        install(distDir, ['Iex.dll', 'Half.dll','IlmThread.dll', 'Imath.dll','IlmImf.dll','zlib1.dll',
                'libpng16.dll', 'jpeg.dll', 'xerces-c_3_1.dll', 'glew32mx.dll', 'libfftw3-3.dll'],
                prefix=dllprefix)
        for boostlib in ['system', 'filesystem', 'chrono', 'thread']:
                install(distDir, ['boost_%s-%s-mt-1_64.dll' % (boostlib, compilerType)], dllprefix)

        installTargets += env.Install(distDir, '#data/windows/README.txt')

        if hasQt:
                install(distDir, ['mtsgui/mtsgui.exe'])
                install(distDir, ['Qt5Core.dll', 'Qt5Gui.dll', 'Qt5Widgets.dll', 'Qt5Xml.dll',
                        'Qt5Network.dll', 'Qt5OpenGL.dll', 'Qt5XmlPatterns.dll'], prefix = env['QT5_LIBPATH'])

if dist:
        if sys.platform == 'win32':
                bits = 64 if 'WIN64' in env['CXXFLAGS'] else 32
                distCommand = env.GetBuildPath('#data/windows/build-dist.bat')
                distTarget = env.Command("Mitsuba %s %ibit.zip" % (MTS_VERSION, bits), [], "%s %s %i" % (distCommand, MTS_VERSION, bits))
                Depends(distTarget, installTargets)